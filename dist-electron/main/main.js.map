{"version":3,"file":"main.js","sources":["../../electron/handlers/fileHandlers.ts","../../electron/main.ts"],"sourcesContent":["/**\r\n * File: electron/handlers/fileHandlers.ts\r\n * Description: Main process handlers for file operations\r\n */\r\n\r\nimport { ipcMain, dialog } from \"electron\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\n// Define channel names as constants\r\nexport const FILE_CHANNELS = {\r\n  SELECT_FILE: \"file:select\",\r\n  READ_FILE: \"file:read\",\r\n  WRITE_FILE: \"file:write\",\r\n  GET_FILES: \"file:get-all\",\r\n  DELETE_FILE: \"file:delete\",\r\n  GET_FILE_INFO: \"file:info\",\r\n} as const;\r\n\r\nexport function setupFileHandlers() {\r\n  // Handler for file selection dialog\r\n  ipcMain.handle(\r\n    FILE_CHANNELS.SELECT_FILE,\r\n    async (_, options?: { multiple?: boolean }) => {\r\n      const result = await dialog.showOpenDialog({\r\n        properties: options?.multiple\r\n          ? [\"openFile\", \"multiSelections\"]\r\n          : [\"openFile\"],\r\n      });\r\n\r\n      return result.filePaths;\r\n    }\r\n  );\r\n\r\n  // Handler for reading file contents\r\n  ipcMain.handle(FILE_CHANNELS.READ_FILE, async (_, filePath: string) => {\r\n    try {\r\n      const content = await fs.readFile(filePath);\r\n      const stats = await fs.stat(filePath);\r\n\r\n      return {\r\n        content,\r\n        name: path.basename(filePath),\r\n        path: filePath,\r\n        size: stats.size,\r\n        lastModified: stats.mtime,\r\n      };\r\n    } catch (error: unknown) {\r\n      const message =\r\n        error instanceof Error ? error.message : \"Unknown error occurred\";\r\n      throw new Error(`Failed to read file: ${message}`);\r\n    }\r\n  });\r\n\r\n  // Handler for writing files\r\n  ipcMain.handle(FILE_CHANNELS.WRITE_FILE, async (_, { filePath, content }) => {\r\n    try {\r\n      await fs.writeFile(filePath, content);\r\n      const stats = await fs.stat(filePath);\r\n\r\n      return {\r\n        name: path.basename(filePath),\r\n        path: filePath,\r\n        size: stats.size,\r\n        lastModified: stats.mtime,\r\n      };\r\n    } catch (error: unknown) {\r\n      const message =\r\n        error instanceof Error ? error.message : \"Unknown error occurred\";\r\n      throw new Error(`Failed to write file: ${message}`);\r\n    }\r\n  });\r\n\r\n  // Handler for getting all files in a directory\r\n  ipcMain.handle(FILE_CHANNELS.GET_FILES, async (_, dirPath: string) => {\r\n    try {\r\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\r\n\r\n      const files = await Promise.all(\r\n        entries\r\n          .filter((entry) => entry.isFile())\r\n          .map(async (entry) => {\r\n            const filePath = path.join(dirPath, entry.name);\r\n            const stats = await fs.stat(filePath);\r\n\r\n            return {\r\n              name: entry.name,\r\n              path: filePath,\r\n              size: stats.size,\r\n              lastModified: stats.mtime,\r\n              type:\r\n                path.extname(entry.name).toLowerCase().slice(1) || \"unknown\",\r\n            };\r\n          })\r\n      );\r\n\r\n      return files;\r\n    } catch (error: unknown) {\r\n      const message =\r\n        error instanceof Error ? error.message : \"Unknown error occurred\";\r\n      throw new Error(`Failed to get files: ${message}`);\r\n    }\r\n  });\r\n\r\n  // Handler for deleting files\r\n  ipcMain.handle(FILE_CHANNELS.DELETE_FILE, async (_, filePath: string) => {\r\n    try {\r\n      await fs.unlink(filePath);\r\n      return true;\r\n    } catch (error: unknown) {\r\n      const message =\r\n        error instanceof Error ? error.message : \"Unknown error occurred\";\r\n      throw new Error(`Failed to delete file: ${message}`);\r\n    }\r\n  });\r\n\r\n  // Handler for getting file information\r\n  ipcMain.handle(FILE_CHANNELS.GET_FILE_INFO, async (_, filePath: string) => {\r\n    try {\r\n      const stats = await fs.stat(filePath);\r\n\r\n      return {\r\n        name: path.basename(filePath),\r\n        path: filePath,\r\n        size: stats.size,\r\n        lastModified: stats.mtime,\r\n        type: path.extname(filePath).toLowerCase().slice(1) || \"unknown\",\r\n      };\r\n    } catch (error: unknown) {\r\n      const message =\r\n        error instanceof Error ? error.message : \"Unknown error occurred\";\r\n      throw new Error(`Failed to get file info: ${message}`);\r\n    }\r\n  });\r\n}\r\n","import { app, BrowserWindow } from \"electron\";\r\nimport * as path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nimport { setupFileHandlers } from \"./handlers/fileHandlers\";\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nprocess.env.DIST_ELECTRON = path.join(__dirname);\r\nprocess.env.DIST = path.join(process.env.DIST_ELECTRON, \"../dist\");\r\nprocess.env.VITE_PUBLIC = app.isPackaged\r\n  ? process.env.DIST\r\n  : path.join(process.env.DIST_ELECTRON, \"../public\");\r\n\r\nlet mainWindow: BrowserWindow | null = null;\r\n\r\n// Setup file handlers before app is ready\r\nsetupFileHandlers();\r\n\r\nasync function createWindow() {\r\n  const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;\r\n\r\n  mainWindow = new BrowserWindow({\r\n    width: 1200,\r\n    height: 800,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, \"../preload/preload.js\"), // Updated path\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n      webSecurity: true,\r\n      sandbox: false,\r\n    },\r\n  });\r\n\r\n  // Set Content-Security-Policy\r\n  mainWindow.webContents.session.webRequest.onHeadersReceived(\r\n    (details, callback) => {\r\n      callback({\r\n        responseHeaders: {\r\n          ...details.responseHeaders,\r\n          \"Content-Security-Policy\": [\r\n            \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data:;\",\r\n          ],\r\n        },\r\n      });\r\n    }\r\n  );\r\n\r\n  // Load the app\r\n  if (VITE_DEV_SERVER_URL) {\r\n    mainWindow.loadURL(VITE_DEV_SERVER_URL);\r\n    // Only open DevTools if explicitly requested via environment variable\r\n    if (process.env.ELECTRON_DEBUG === \"1\") {\r\n      mainWindow.webContents.openDevTools();\r\n    }\r\n  } else {\r\n    mainWindow.loadFile(path.join(process.env.DIST!, \"index.html\"));\r\n  }\r\n}\r\n\r\napp.whenReady().then(createWindow);\r\n\r\n// Quit when all windows are closed.\r\napp.on(\"window-all-closed\", () => {\r\n  if (process.platform !== \"darwin\") {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n  if (mainWindow === null) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// Handle IPC events\r\nprocess.on(\"unhandledRejection\", (error) => {\r\n  console.error(\"Unhandled rejection:\", error);\r\n});\r\n"],"names":["path"],"mappings":"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"}