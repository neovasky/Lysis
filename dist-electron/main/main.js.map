{"version":3,"file":"main.js","sources":["../../electron/handlers/fileHandlers.ts","../../electron/main.ts"],"sourcesContent":["/**\r\n * File: electron/handlers/fileHandlers.ts\r\n * Description: Main process handlers for file operations\r\n */\r\n\r\nimport { ipcMain, dialog, shell } from \"electron\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport crypto from \"crypto\";\r\n\r\n// Define channel names as constants\r\nexport const FILE_CHANNELS = {\r\n  SELECT_FILE: \"file:select\",\r\n  READ_FILE: \"file:read\",\r\n  WRITE_FILE: \"file:write\",\r\n  GET_FILES: \"file:get-all\",\r\n  DELETE_FILE: \"file:delete\",\r\n  GET_FILE_INFO: \"file:info\",\r\n  RENAME_FILE: \"file:rename\",\r\n  CREATE_DIRECTORY: \"file:create-dir\",\r\n  MOVE_FILE: \"file:move\",\r\n  COPY_FILE: \"file:copy\",\r\n  WATCH_FILE: \"file:watch\",\r\n  GET_FILE_HASH: \"file:hash\",\r\n  OPEN_FILE: \"file:open\",\r\n} as const;\r\n\r\nexport function setupFileHandlers() {\r\n  // Handler for file selection dialog\r\n  ipcMain.handle(\r\n    FILE_CHANNELS.SELECT_FILE,\r\n    async (\r\n      _,\r\n      options?: {\r\n        multiple?: boolean;\r\n        directory?: boolean;\r\n        filters?: { name: string; extensions: string[] }[];\r\n      }\r\n    ) => {\r\n      try {\r\n        const properties: Array<\r\n          \"openFile\" | \"multiSelections\" | \"openDirectory\"\r\n        > = options?.directory ? [\"openDirectory\"] : [\"openFile\"];\r\n\r\n        if (options?.multiple && !options?.directory) {\r\n          properties.push(\"multiSelections\");\r\n        }\r\n\r\n        const result = await dialog.showOpenDialog({\r\n          properties,\r\n          filters: options?.filters,\r\n        });\r\n\r\n        return result.filePaths;\r\n      } catch (error) {\r\n        console.error(\"File selection error:\", error);\r\n        throw error;\r\n      }\r\n    }\r\n  );\r\n\r\n  // Handler for reading file contents\r\n  ipcMain.handle(FILE_CHANNELS.READ_FILE, async (_, filePath: string) => {\r\n    try {\r\n      const content = await fs.readFile(filePath);\r\n      const stats = await fs.stat(filePath);\r\n      const hash = await getFileHash(filePath);\r\n\r\n      return {\r\n        content,\r\n        name: path.basename(filePath),\r\n        path: filePath,\r\n        size: stats.size,\r\n        lastModified: stats.mtime,\r\n        hash,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"File read error:\", error);\r\n      throw new Error(\r\n        `Failed to read file: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`\r\n      );\r\n    }\r\n  });\r\n\r\n  // Handler for writing files\r\n  ipcMain.handle(\r\n    FILE_CHANNELS.WRITE_FILE,\r\n    async (_, { filePath, content }: { filePath: string; content: Buffer }) => {\r\n      try {\r\n        const dir = path.dirname(filePath);\r\n        await fs.mkdir(dir, { recursive: true });\r\n        await fs.writeFile(filePath, content);\r\n        const stats = await fs.stat(filePath);\r\n        const hash = await getFileHash(filePath);\r\n\r\n        return {\r\n          name: path.basename(filePath),\r\n          path: filePath,\r\n          size: stats.size,\r\n          lastModified: stats.mtime,\r\n          hash,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"File write error:\", error);\r\n        throw new Error(\r\n          `Failed to write file: ${\r\n            error instanceof Error ? error.message : \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  // Handler for getting all files in a directory\r\n  ipcMain.handle(FILE_CHANNELS.GET_FILES, async (_, dirPath: string) => {\r\n    try {\r\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\r\n\r\n      const files = await Promise.all(\r\n        entries.map(async (entry) => {\r\n          const filePath = path.join(dirPath, entry.name);\r\n          const stats = await fs.stat(filePath);\r\n          const hash = entry.isFile() ? await getFileHash(filePath) : null;\r\n\r\n          return {\r\n            name: entry.name,\r\n            path: filePath,\r\n            size: stats.size,\r\n            lastModified: stats.mtime,\r\n            type: entry.isDirectory() ? \"directory\" : getFileType(entry.name),\r\n            isDirectory: entry.isDirectory(),\r\n            hash,\r\n          };\r\n        })\r\n      );\r\n\r\n      return files;\r\n    } catch (error) {\r\n      console.error(\"Get files error:\", error);\r\n      throw new Error(\r\n        `Failed to get files: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`\r\n      );\r\n    }\r\n  });\r\n\r\n  // Handler for deleting files\r\n  ipcMain.handle(FILE_CHANNELS.DELETE_FILE, async (_, filePath: string) => {\r\n    try {\r\n      const stats = await fs.stat(filePath);\r\n      if (stats.isDirectory()) {\r\n        await fs.rm(filePath, { recursive: true });\r\n      } else {\r\n        await fs.unlink(filePath);\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"File deletion error:\", error);\r\n      throw new Error(\r\n        `Failed to delete file: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`\r\n      );\r\n    }\r\n  });\r\n\r\n  // Handler for getting file information\r\n  ipcMain.handle(FILE_CHANNELS.GET_FILE_INFO, async (_, filePath: string) => {\r\n    try {\r\n      const stats = await fs.stat(filePath);\r\n      const hash = stats.isFile() ? await getFileHash(filePath) : null;\r\n\r\n      return {\r\n        name: path.basename(filePath),\r\n        path: filePath,\r\n        size: stats.size,\r\n        lastModified: stats.mtime,\r\n        type: stats.isDirectory() ? \"directory\" : getFileType(filePath),\r\n        isDirectory: stats.isDirectory(),\r\n        hash,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Get file info error:\", error);\r\n      throw new Error(\r\n        `Failed to get file info: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`\r\n      );\r\n    }\r\n  });\r\n\r\n  // Handler for renaming files\r\n  ipcMain.handle(\r\n    FILE_CHANNELS.RENAME_FILE,\r\n    async (_, { oldPath, newPath }: { oldPath: string; newPath: string }) => {\r\n      try {\r\n        await fs.rename(oldPath, newPath);\r\n        const stats = await fs.stat(newPath);\r\n        const hash = stats.isFile() ? await getFileHash(newPath) : null;\r\n\r\n        return {\r\n          name: path.basename(newPath),\r\n          path: newPath,\r\n          size: stats.size,\r\n          lastModified: stats.mtime,\r\n          type: stats.isDirectory() ? \"directory\" : getFileType(newPath),\r\n          isDirectory: stats.isDirectory(),\r\n          hash,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"File rename error:\", error);\r\n        throw new Error(\r\n          `Failed to rename file: ${\r\n            error instanceof Error ? error.message : \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  // Handler for creating directories\r\n  ipcMain.handle(FILE_CHANNELS.CREATE_DIRECTORY, async (_, dirPath: string) => {\r\n    try {\r\n      await fs.mkdir(dirPath, { recursive: true });\r\n      const stats = await fs.stat(dirPath);\r\n\r\n      return {\r\n        name: path.basename(dirPath),\r\n        path: dirPath,\r\n        size: stats.size,\r\n        lastModified: stats.mtime,\r\n        type: \"directory\",\r\n        isDirectory: true,\r\n        hash: null,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Directory creation error:\", error);\r\n      throw new Error(\r\n        `Failed to create directory: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`\r\n      );\r\n    }\r\n  });\r\n\r\n  // Handler for moving files\r\n  ipcMain.handle(\r\n    FILE_CHANNELS.MOVE_FILE,\r\n    async (\r\n      _,\r\n      { sourcePath, targetPath }: { sourcePath: string; targetPath: string }\r\n    ) => {\r\n      try {\r\n        await fs.rename(sourcePath, targetPath);\r\n        const stats = await fs.stat(targetPath);\r\n        const hash = stats.isFile() ? await getFileHash(targetPath) : null;\r\n\r\n        return {\r\n          name: path.basename(targetPath),\r\n          path: targetPath,\r\n          size: stats.size,\r\n          lastModified: stats.mtime,\r\n          type: stats.isDirectory() ? \"directory\" : getFileType(targetPath),\r\n          isDirectory: stats.isDirectory(),\r\n          hash,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"File move error:\", error);\r\n        throw new Error(\r\n          `Failed to move file: ${\r\n            error instanceof Error ? error.message : \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  // Handler for copying files\r\n  ipcMain.handle(\r\n    FILE_CHANNELS.COPY_FILE,\r\n    async (\r\n      _,\r\n      { sourcePath, targetPath }: { sourcePath: string; targetPath: string }\r\n    ) => {\r\n      try {\r\n        await fs.copyFile(sourcePath, targetPath);\r\n        const stats = await fs.stat(targetPath);\r\n        const hash = await getFileHash(targetPath);\r\n\r\n        return {\r\n          name: path.basename(targetPath),\r\n          path: targetPath,\r\n          size: stats.size,\r\n          lastModified: stats.mtime,\r\n          type: getFileType(targetPath),\r\n          isDirectory: false,\r\n          hash,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"File copy error:\", error);\r\n        throw new Error(\r\n          `Failed to copy file: ${\r\n            error instanceof Error ? error.message : \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  // Handler for opening files in default application\r\n  ipcMain.handle(FILE_CHANNELS.OPEN_FILE, async (_, filePath: string) => {\r\n    try {\r\n      await shell.openPath(filePath);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"File open error:\", error);\r\n      throw new Error(\r\n        `Failed to open file: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n// Helper function to get file type from extension\r\nfunction getFileType(filename: string): string {\r\n  const ext = path.extname(filename).toLowerCase();\r\n  switch (ext) {\r\n    case \".pdf\":\r\n      return \"pdf\";\r\n    case \".xlsx\":\r\n    case \".xls\":\r\n      return \"excel\";\r\n    case \".doc\":\r\n    case \".docx\":\r\n      return \"word\";\r\n    case \".txt\":\r\n    case \".md\":\r\n      return \"text\";\r\n    default:\r\n      return \"other\";\r\n  }\r\n}\r\n\r\n// Helper function to calculate file hash\r\nasync function getFileHash(filePath: string): Promise<string> {\r\n  try {\r\n    const content = await fs.readFile(filePath);\r\n    return crypto.createHash(\"sha256\").update(content).digest(\"hex\");\r\n  } catch (error) {\r\n    console.error(\"Hash calculation error:\", error);\r\n    throw new Error(\r\n      `Failed to calculate file hash: ${\r\n        error instanceof Error ? error.message : \"Unknown error\"\r\n      }`\r\n    );\r\n  }\r\n}\r\n","import { app, BrowserWindow, ipcMain } from \"electron\";\r\nimport * as path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nimport { setupFileHandlers } from \"./handlers/fileHandlers\";\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nprocess.env.DIST_ELECTRON = path.join(__dirname);\r\nprocess.env.DIST = path.join(process.env.DIST_ELECTRON, \"../dist\");\r\n\r\nlet mainWindow: BrowserWindow | null = null;\r\n\r\n// Setup file handlers before app is ready\r\nsetupFileHandlers();\r\n\r\nasync function createWindow() {\r\n  const isDev = !app.isPackaged;\r\n  const VITE_DEV_SERVER_URL =\r\n    process.env.VITE_DEV_SERVER_URL || \"http://localhost:5173\";\r\n\r\n  const pdfPath = isDev\r\n    ? path.join(__dirname, \"..\", \"public\", \"example.pdf\") // Dev Mode\r\n    : path.join(process.resourcesPath, \"example.pdf\"); // Prod Mode\r\n\r\n  console.log(`✅ PDF Path: ${pdfPath}`);\r\n\r\n  mainWindow = new BrowserWindow({\r\n    width: 1200,\r\n    height: 800,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, \"../preload/preload.js\"), // ✅ Corrected path\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n      webSecurity: true,\r\n      sandbox: false,\r\n    },\r\n  });\r\n\r\n  if (!mainWindow) {\r\n    console.error(\"❌ Failed to create mainWindow.\");\r\n    return;\r\n  }\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    await mainWindow.loadURL(VITE_DEV_SERVER_URL);\r\n    if (process.env.ELECTRON_DEBUG === \"1\") {\r\n      mainWindow.webContents.on(\"did-finish-load\", () => {\r\n        console.log(\"📌 DevTools are disabled to prevent Chromium warnings.\");\r\n      });\r\n    }\r\n  }\r\n\r\n  // ✅ Send PDF path to renderer when window loads\r\n  mainWindow.webContents.once(\"did-finish-load\", () => {\r\n    mainWindow?.webContents.send(\"load-pdf\", pdfPath);\r\n  });\r\n}\r\n\r\n// ✅ IPC: Handle PDF Path Request from Renderer\r\nipcMain.handle(\"get-pdf-path\", () => {\r\n  const isDev = !app.isPackaged;\r\n  return isDev\r\n    ? path.join(__dirname, \"..\", \"public\", \"example.pdf\") // Dev Mode\r\n    : path.join(process.resourcesPath, \"example.pdf\"); // Prod Mode\r\n});\r\n\r\napp.whenReady().then(createWindow);\r\n\r\napp.on(\"window-all-closed\", () => {\r\n  if (process.platform !== \"darwin\") {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) createWindow();\r\n\r\n  process.on(\"unhandledRejection\", (error) => {\r\n    console.error(\"Unhandled rejection:\", error);\r\n  });\r\n});\r\n"],"names":["path"],"mappings":"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"}